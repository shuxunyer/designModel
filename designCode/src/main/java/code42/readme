

1 单例对 OOP特性的支持不友好
 OOP的四大特性：封装 抽象 继承 多态
 单例这种设计模式对于其中的抽象 继承 多态都支持得不好
 抽象：
 违背了基于接口而非实现的设计原则，也就违背了广义上理解的OOP的抽象特性
 单例对继承和多态的支持也不友好 所以一旦选择了将某个类设计成单例类，
 也就意味放弃了继承和多态这两个强有力的面向对象特性，
 也就相当于损失了可以应对未来需求变化的扩展性

2 单例会隐藏类之间的依赖关系

3 单例对代码的扩展性不友好

4 单例对代码的可测试性不友好

5 单例不支持有参数的构造函数

要完全解决上述这些问题，我们可能要从根上，寻找其他的方式来实现全局的唯一类
实际上，类对象的全局唯一性可以通过多种不同的方式来保证
例如：工厂模式、IOC容器(比如Spring IOC 容器)


