总结回顾 面向对象、设计原则、编程规范、重构技巧等知识点


面向对象：
封装、抽象、继承、多态
面向对象编程VS 面向过程编程
面向对象分析、设计、编程
接口VS抽象类
基于接口而非实现编程
多用组合少用继承
贫血模型和充血模型

设计原则:
SOLID原则-SRP单一职责原则
SOLID原则-OCP开闭原则
LSP理式替换原则
ISP接口隔离原则
DIP依赖倒置原则
DRY原则、KISS原则、YAGNI原则、LOD法则

编程规范
20条最快速改善代码质量的编程规范

代码重构
目的、对象、时机、方法
单元测试和代码的可测试性
大重构(大规模、高层次)
小重构(小规模、底层次)


设计模式
  创建型：
   常用的：单例模式、工程模式(工厂方法和抽象方法)、造建者模式
   不常用: 原型模式
  结构型：
    常用：代理模式 桥接模式  装饰者模式  适配器模式
    不常用：门面模式 组合模式 享元模式
  行为型：
   常用：观察者模式 模板模式 策略模式
     职责链模式 迭代器模式 状态模式
   不常用：访问者模式 备忘录模式 命令模式
      解释器模式 中介模式





5 接口VS抽象类：
抽象类是对成员变量和方法的抽象，是一种is-a关系，为了解决代码的复用问题
接口是对一组方法的抽象，是一种has-a关系，表示具有某一组行为特性。
隔离接口和具体实现，从而实现解耦的效果，达到可扩展性的目的

6 基于接口而非实现编程
将接口和实现分离，封装不稳定的实现，暴露稳定的接口。
上游系统面向接口而非实现编程，不依赖不稳定的实现细节，
这样当实现发生变化时，上游的代码基本上不需要做改动，以此来降低耦合性，提高扩展性

















